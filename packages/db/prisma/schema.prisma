generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  repositories Repository[]
  tasks        Task[]
  memories     Memory[]
  chatMessages ChatMessage[]

  @@map("users")
}

model Repository {
  id            String   @id @default(uuid())
  name          String
  fullName      String   @unique
  description   String?
  url           String
  private       Boolean  @default(false)
  defaultBranch String   @default("main")
  owner         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tasks     Task[]
  memories  Memory[]

  @@map("repositories")
}

model Task {
  id            String      @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus  @default(PENDING)
  priority      TaskPriority @default(MEDIUM)
  assignedAgent String?
  progress      Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  completedAt   DateTime?

  // Relations
  repository   Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  logs         TaskLog[]
  chatMessages ChatMessage[]

  @@map("tasks")
}

model TaskLog {
  id        String   @id @default(uuid())
  level     LogLevel
  message   String
  metadata  Json?
  timestamp DateTime @default(now())

  // Relations
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String

  @@map("task_logs")
}

model ChatMessage {
  id        String   @id @default(uuid())
  content   String
  role      String   // 'user' | 'assistant' | 'system'
  timestamp DateTime @default(now())
  metadata  Json?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  task   Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?

  @@map("chat_messages")
}

model Memory {
  id      String     @id @default(uuid())
  type    MemoryType
  title   String
  content String
  tags    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@map("memories")
}

model ToolCall {
  id         String   @id @default(uuid())
  name       String
  parameters Json
  result     Json?
  error      String?
  timestamp  DateTime @default(now())

  @@map("tool_calls")
}

model FileEmbedding {
  id         String   @id @default(uuid())
  filePath   String
  content    String
  embedding  Float[]
  repository String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([filePath, repository])
  @@map("file_embeddings")
}

model TerminalSession {
  id          String   @id @default(uuid())
  sessionId   String   @unique
  workingDir  String
  environment Json?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("terminal_sessions")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum MemoryType {
  CODEBASE_SUMMARY
  IMPORTANT_FILE
  ARCHITECTURAL_DECISION
  BUG_REPORT
  FEATURE_REQUEST
  GENERAL
}